#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Autonomous GitHub AI Agent
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Issue
- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –∏ –ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ (JSON) —á–µ—Ä–µ–∑ OpenAI Chat Completions
- –°–æ–∑–¥–∞–µ—Ç –≤–µ—Ç–∫—É, –∫–æ–º–º–∏—Ç—ã, –ø—É—à–∏—Ç –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç Pull Request
- –ü–∏—à–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ Issue

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —É–∂–µ –µ—Å—Ç—å –≤ workflow:
  - PyGithub
  - GitPython

–ù—É–∂–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã:
  - GH_TOKEN
  - OPENAI_API_KEY
  - (–æ–ø—Ü.) OPENAI_MODEL, default: gpt-4.1-mini
"""

import os
import re
import json
import sys
import time
import shutil
import logging
import traceback
from pathlib import Path
from datetime import datetime

import git
from github import Github

import urllib.request
import urllib.error

# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
LOG_DIR = Path("logs")
LOG_DIR.mkdir(parents=True, exist_ok=True)
log_file = LOG_DIR / "agent.log"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(log_file, encoding="utf-8"),
        logging.StreamHandler(sys.stdout),
    ],
)

# ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ----------
REPO_NAME = os.environ.get("REPO_NAME")  # org/repo
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
OPENAI_MODEL = os.environ.get("OPENAI_MODEL", "gpt-4.1-mini")

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –æ–≥—Ä–∞–Ω–∏—á–∏–º, –∫—É–¥–∞ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å
ALLOWED_MAX_FILES = 12
ALLOWED_MAX_BYTES_PER_FILE = 200_000  # ~200 KB
FORBIDDEN_PATHS = {
    ".git", ".github/workflows", ".github/actions", ".gitignore",
    "/etc", "/usr", "/bin", "/sbin", "/var", "/tmp"
}

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def read_github_event_issue_number() -> int | None:
    """–ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã—Ç–∞—â–∏—Ç—å –Ω–æ–º–µ—Ä issue –∏–∑ GITHUB_EVENT_PATH (fallback –¥–ª—è workflow_dispatch)."""
    event_path = os.environ.get("GITHUB_EVENT_PATH")
    if not event_path or not Path(event_path).exists():
        return None
    try:
        data = json.loads(Path(event_path).read_text(encoding="utf-8"))
        if "issue" in data and "number" in data["issue"]:
            return int(data["issue"]["number"])
        # workflow_dispatch input
        if "inputs" in data and "issue_number" in data["inputs"] and data["inputs"]["issue_number"]:
            return int(data["inputs"]["issue_number"])
    except Exception:
        logging.exception("Failed to parse GITHUB_EVENT_PATH")
    return None


def get_issue_number() -> int:
    val = os.environ.get("ISSUE_NUMBER")
    if val:
        try:
            return int(val)
        except ValueError:
            pass
    n = read_github_event_issue_number()
    if n is None:
        raise RuntimeError("ISSUE_NUMBER not provided and could not be inferred from GITHUB_EVENT_PATH.")
    return n


def gh_client() -> Github:
    if not GITHUB_TOKEN:
        raise RuntimeError("GITHUB_TOKEN is not set.")
    return Github(GITHUB_TOKEN)


def openai_chat_completion_json(system_prompt: str, user_prompt: str, model: str) -> dict:
    """
    –î–µ–ª–∞–µ—Ç –≤—ã–∑–æ–≤ OpenAI Chat Completions –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON-–æ–±—ä–µ–∫—Ç.
    –ù–µ —Ç—Ä–µ–±—É–µ—Ç –ø–∞–∫–µ—Ç–∞ openai (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç urllib).

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–≥–æ dict. –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ —Ç–µ–∫—Å—Ç —Å –æ–±–µ—Ä—Ç–∫–∞–º–∏ ‚Äî –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å.
    """
    if not OPENAI_API_KEY:
        raise RuntimeError("OPENAI_API_KEY is not set.")

    url = "https://api.openai.com/v1/chat/completions"
    payload = {
        "model": model,
        "temperature": 0.2,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
        # –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∂–µ–ª–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
        "response_format": {"type": "json_object"},
        "max_tokens": 3500,
    }
    data = json.dumps(payload).encode("utf-8")
    req = urllib.request.Request(
        url,
        data=data,
        headers={
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "Content-Type": "application/json",
        },
        method="POST",
    )
    try:
        with urllib.request.urlopen(req, timeout=90) as resp:
            raw = resp.read().decode("utf-8")
            obj = json.loads(raw)
            content = obj["choices"][0]["message"]["content"]
    except urllib.error.HTTPError as e:
        msg = e.read().decode("utf-8", errors="ignore")
        logging.error("OpenAI HTTPError: %s", msg)
        raise
    except Exception:
        logging.exception("OpenAI request failed")
        raise

    # –ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å JSON-–æ–±—ä–µ–∫—Ç —Å—Ç—Ä–æ–∫–æ–π; –ø–∞—Ä—Å–∏–º –Ω–∞–¥–µ–∂–Ω–æ.
    try:
        return json.loads(content)
    except Exception:
        # fallback: –≤—ã—Ç–∞—â–∏–º JSON –ø–æ —Ñ–∏–≥—É—Ä–Ω—ã–º —Å–∫–æ–±–∫–∞–º
        logging.warning("Model did not return clean JSON, trying to extract object...")
        return extract_json_object(content)


def extract_json_object(text: str) -> dict:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
    start = text.find("{")
    end = text.rfind("}")
    if start == -1 or end == -1 or end <= start:
        raise ValueError("No JSON object found in model response.")
    candidate = text[start : end + 1]
    # –ë–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫
    depth = 0
    last = start
    for i, ch in enumerate(text[start:], start=start):
        if ch == "{":
            depth += 1
        elif ch == "}":
            depth -= 1
            if depth == 0:
                last = i + 1
                break
    candidate = text[start:last]
    return json.loads(candidate)


def add_issue_comment(repo, issue_number: int, body: str):
    issue = repo.get_issue(number=issue_number)
    issue.create_comment(body)
    logging.info("üí¨ Comment added to issue #%s", issue_number)


def safe_path(path_str: str) -> Path:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—É—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π Path –≤–Ω—É—Ç—Ä–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    p = Path(path_str).as_posix().lstrip("/")  # —É–±–∏—Ä–∞–µ–º –ª–∏–¥–∏—Ä—É—é—â–∏–π /
    p = Path(p)
    # –ó–∞–ø—Ä–µ—Ç—ã
    for f in FORBIDDEN_PATHS:
        if p.as_posix().startswith(f):
            raise ValueError(f"Path '{p}' is forbidden for modification.")
    # –ó–∞–ø—Ä–µ—Ç –Ω–∞ –≤—ã—Ö–æ–¥ –≤–≤–µ—Ä—Ö
    if ".." in p.parts:
        raise ValueError(f"Path '{p}' escapes repo (..).")
    return p


def apply_changes_locally(repo_root: Path, changes: list[dict]) -> list[str]:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ.
    –§–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:
      { "path": "some/file.py", "op": "create|update", "content": "..." , "message": "Commit msg (optional)" }
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π.
    """
    if len(changes) > ALLOWED_MAX_FILES:
        raise ValueError(f"Too many files to change: {len(changes)} (limit {ALLOWED_MAX_FILES})")

    changed_paths = []

    for ch in changes:
        path = safe_path(ch.get("path", "").strip())
        op = (ch.get("op") or ch.get("action") or "update").lower()
        content = ch.get("content", "")

        if not path or not op:
            raise ValueError("Change item must include 'path' and 'op'.")

        if isinstance(content, str):
            content_bytes = content.encode("utf-8")
        else:
            content_bytes = json.dumps(content, ensure_ascii=False, indent=2).encode("utf-8")

        if len(content_bytes) > ALLOWED_MAX_BYTES_PER_FILE:
            raise ValueError(f"File '{path}' is too large ({len(content_bytes)} bytes).")

        abs_path = repo_root / path
        abs_path.parent.mkdir(parents=True, exist_ok=True)

        if op == "create" and abs_path.exists():
            logging.info("File %s already exists; switching to update.", path)
            op = "update"

        if op not in {"create", "update"}:
            raise ValueError(f"Unsupported op '{op}'. Only 'create' or 'update' allowed.")

        abs_path.write_bytes(content_bytes)
        changed_paths.append(path.as_posix())
        logging.info("‚úèÔ∏è  %s %s", op.upper(), path)

    return changed_paths


def git_create_branch_commit_push(branch: str, changed_paths: list[str], commit_message: str) -> None:
    repo = git.Repo(Path(".").resolve())
    # –°–æ–∑–¥–∞—ë–º –≤–µ—Ç–∫—É –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ HEAD
    if branch in repo.heads:
        repo.git.checkout(branch)
    else:
        repo.git.checkout("-b", branch)

    repo.index.add(changed_paths)
    repo.index.commit(commit_message or "AI: apply changes")

    # –ü—É—à–∏–º
    origin = repo.remote(name="origin")
    # –ò–Ω–æ–≥–¥–∞ –ø–µ—Ä–≤—ã–π –ø—É—à —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ upstream
    try:
        origin.push(refspec=f"{branch}:{branch}")
    except Exception:
        repo.git.push("--set-upstream", "origin", branch)
    logging.info("‚¨ÜÔ∏è  Pushed branch '%s'", branch)


def create_pull_request(gh_repo, branch: str, base: str, title: str, body: str):
    pr = gh_repo.create_pull(
        title=title,
        body=body,
        head=branch,
        base=base,
    )
    logging.info("‚úÖ PR created: #%s %s", pr.number, pr.html_url)
    return pr


def collect_repo_context_for_prompt(root: Path, interesting_files: list[str], max_chars_per_file: int = 4000) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ñ–∞–π–ª–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å) –¥–ª—è LLM."""
    out = []
    out.append("Repository brief context (truncated files):")
    for rel in interesting_files:
        p = root / rel
        if p.exists() and p.is_file():
            try:
                txt = p.read_text(encoding="utf-8", errors="ignore")
            except Exception:
                txt = p.read_bytes()[:max_chars_per_file].decode("utf-8", errors="ignore")
            snippet = txt[:max_chars_per_file]
            out.append(f"\n--- FILE: {rel} (first {len(snippet)} chars) ---\n{snippet}\n--- END FILE {rel} ---")
        else:
            out.append(f"\n--- FILE: {rel} (not found) ---")
    return "\n".join(out)


# ---------- –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π ----------
def main():
    logging.info("==================================================")
    logging.info("üöÄ GitHub AI Agent Starting")
    logging.info("==================================================")

    if not REPO_NAME:
        raise RuntimeError("REPO_NAME is not set.")
    if not GITHUB_TOKEN:
        raise RuntimeError("GITHUB_TOKEN is not set.")

    issue_number = get_issue_number()
    logging.info("ü§ñ Agent initialized for: %s", REPO_NAME)
    logging.info("üß† Using OpenAI model: %s", OPENAI_MODEL)

    gh = gh_client()
    gh_repo = gh.get_repo(REPO_NAME)
    base_branch = gh_repo.default_branch or "main"

    # –ß–∏—Ç–∞–µ–º Issue
    issue = gh_repo.get_issue(number=issue_number)
    issue_title = issue.title or ""
    issue_body = issue.body or ""
    add_issue_comment(gh_repo, issue_number, "ü§ñ AI Agent –Ω–∞—á–∞–ª –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏‚Ä¶")

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–ø–æ (–∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç)
    repo_root = Path(".").resolve()
    context_text = collect_repo_context_for_prompt(
        repo_root,
        interesting_files=[
            "hybrid_search.py",
            "real_estate_vector_db.py",
            "real_estate_embedding_function.py",
            "test_hybrid_simple.py",
            "README.md",
        ],
    )

    # –ó–∞–ø—Ä–æ—Å –∫ LLM
system_prompt = (
    "You are an autonomous senior Python engineer working inside a CI bot for GitHub.\n"
    "Given an issue (title + body) and a brief repo context, you must propose a minimal,\n"
    "safe and incremental solution and PRODUCE CONCRETE CODE CHANGES.\n\n"
    "Return ONLY a valid JSON object with this schema:\n"
    "{\n"
    "  \"plan_markdown\": \"string (markdown with short step-by-step plan)\",\n"
    "  \"changes\": [\n"
    "    {\n"
    "      \"path\": \"relative/path.ext\",\n"
    "      \"op\": \"create\" | \"update\",\n"
    "      \"content\": \"full file content as UTF-8 text\",\n"
    "      \"message\": \"short commit message for this file (optional)\"\n"
    "    }\n"
    "  ],\n"
    "  \"summary_commit_message\": \"short general commit message\"\n"
    "}\n\n"
    "Constraints:\n"
    f"- No more than {ALLOWED_MAX_FILES} files.\n"
    f"- Each file must be <= {ALLOWED_MAX_BYTES_PER_FILE} bytes of content.\n"
    "- Do not delete files. Only create or update.\n"
    "- Keep code self-contained and runnable. Include imports if needed.\n"
    "- Prefer small, atomic changes and add/update tests when reasonable.\n"
    "- Keep paths inside repo; never use absolute or parent paths.\n"
)

    user_prompt = (
        f"Issue Title:\n{issue_title}\n\n"
        f"Issue Body:\n{issue_body}\n\n"
        f"{context_text}\n\n"
        "Now, produce the JSON as specified. No prose, no backticks."
    )

    try:
        llm_json = openai_chat_completion_json(system_prompt, user_prompt, OPENAI_MODEL)
    except Exception as e:
        add_issue_comment(gh_repo, issue_number, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ LLM: {e}")
        raise

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    plan_md = llm_json.get("plan_markdown", "").strip()
    changes = llm_json.get("changes", [])
    summary_commit = (llm_json.get("summary_commit_message") or "AI: apply changes").strip()

    if not isinstance(changes, list) or not changes:
        add_issue_comment(gh_repo, issue_number, "‚ÑπÔ∏è –ú–æ–¥–µ–ª—å –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É Issue.")
        logging.info("No changes proposed by model.")
        return

    # –ü—É–±–ª–∏–∫—É–µ–º –ø–ª–∞–Ω
    if plan_md:
        add_issue_comment(gh_repo, issue_number, f"üß† –ê–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω:\n\n{plan_md}")

    # –í–µ—Ç–∫–∞
    branch = f"ai-issue-{issue_number}-{datetime.utcnow().strftime('%Y%m%d%H%M%S')}"
    logging.info("üì¶ Creating branch: %s (base=%s)", branch, base_branch)

    # –ì–æ—Ç–æ–≤–∏–º —Ä–∞–±–æ—á–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ git
    repo = git.Repo(repo_root)
    # –û–±–Ω–æ–≤–∏–º –±–∞–∑–æ–≤—É—é –≤–µ—Ç–∫—É (–Ω–∞ –≤—Å—è–∫–∏–π)
    repo.git.checkout(base_branch)
    repo.remotes.origin.fetch()
    repo.git.pull("--ff-only", "origin", base_branch)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫–µ
    changed_paths = apply_changes_locally(repo_root, changes)

    # –°–≤–æ–¥–Ω—ã–π commit msg
    detailed_msgs = []
    for ch in changes:
        p = ch.get("path")
        m = ch.get("message") or ""
        if p:
            detailed_msgs.append(f"* {p} ‚Äî {m}".strip())
    commit_message = summary_commit + ("\n\n" + "\n".join(detailed_msgs) if detailed_msgs else "")

    # –ö–æ–º–º–∏—Ç –∏ –ø—É—à
    git_create_branch_commit_push(branch, changed_paths, commit_message)

    # –°–æ–∑–¥–∞–µ–º PR
    pr_title = f"[AI] {issue_title}".strip() or f"[AI] Changes for issue #{issue_number}"
    pr_body = (
        f"ü§ñ This PR was generated automatically by the AI Agent.\n\n"
        f"Linked issue: #{issue_number}\n\n"
        f"### Plan\n{plan_md or '(no plan provided)'}\n"
    )
    pr = create_pull_request(gh_repo, branch=branch, base=base_branch, title=pr_title, body=pr_body)

    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ issue
    add_issue_comment(
        gh_repo,
        issue_number,
        f"‚úÖ –ì–æ—Ç–æ–≤ PR: #{pr.number}\n{pr.html_url}\n\n"
        "–ü—Ä–æ–≤–µ—Ä—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –º–æ–∂–Ω–æ –º–µ—Ä–∂–∏—Ç—å. "
        "–ï—Å–ª–∏ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∫–∏ ‚Äî –¥–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∞–≥–µ–Ω—Ç –ø–æ–ø—Ä–æ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç—å."
    )

    logging.info("‚úÖ Issue #%s processed", issue_number)
    logging.info("‚úÖ Agent finished successfully")


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logging.error("‚ùå Unhandled error: %s", e)
        traceback.print_exc()
        # –ü–∞–¥–µ–Ω–∏–µ ‚Äî —Ç–æ–∂–µ –æ—Å—Ç–∞–≤–∏–º —Å–ª–µ–¥ –≤ –ª–æ–≥–∞—Ö –∏, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –≤ Issue
        try:
            if REPO_NAME and GITHUB_TOKEN:
                gh = gh_client()
                repo = gh.get_repo(REPO_NAME)
                n = get_issue_number()
                add_issue_comment(repo, n, f"‚ùå –ê–≥–µ–Ω—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π:\n```\n{e}\n```\n–°–º–æ—Ç—Ä–∏ artifact logs/ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
        except Exception:
            pass
        sys.exit(1)

