"""
Simple AI Agent for GitHub
–í–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
"""

import os
import sys
import json
import logging
from pathlib import Path
from datetime import datetime

from github import Github
from anthropic import Anthropic

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_DIR = Path("logs")
LOG_DIR.mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_DIR / f"agent_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


class SimpleGitHubAgent:
    def __init__(self):
        self.github = Github(os.environ['GITHUB_TOKEN'])
        self.repo = self.github.get_repo(os.environ['REPO_NAME'])
        self.claude = Anthropic(api_key=os.environ['OPEN_AI_TOKEN'])
        self.issue_number = os.environ.get('ISSUE_NUMBER')
        
        logger.info(f"ü§ñ Agent initialized for: {os.environ['REPO_NAME']}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥"""
        try:
            if self.issue_number:
                issue = self.repo.get_issue(int(self.issue_number))
                self.process_issue(issue)
            else:
                self.process_all_issues()
        except Exception as e:
            logger.error(f"‚ùå Error: {e}", exc_info=True)
            raise
    
    def process_all_issues(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ open issues —Å label ai-agent"""
        try:
            label = self.repo.get_label('ai-agent')
        except:
            logger.error("Label 'ai-agent' –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ Settings ‚Üí Labels")
            return
        
        issues = self.repo.get_issues(state='open', labels=[label])
        
        for issue in issues:
            if not self.is_processed(issue):
                logger.info(f"üìã Processing issue #{issue.number}")
                self.process_issue(issue)
    
    def process_issue(self, issue):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω issue"""
        try:
            # –û—Ç–º–µ—á–∞–µ–º –Ω–∞—á–∞–ª–æ
            self.comment(issue, "ü§ñ AI Agent –Ω–∞—á–∏–Ω–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏...")
            
            # –ê–Ω–∞–ª–∏–∑
            logger.info("Analyzing task...")
            analysis = self.analyze_task(issue)
            
            self.comment(issue, f"**üìä –ê–Ω–∞–ª–∏–∑:**\n\n{analysis}")
            
            # –î–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–¥–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Ä–µ—à–µ–Ω–∏–µ–º
            logger.info("Generating solution...")
            solution = self.generate_solution(issue, analysis)
            
            self.comment(
                issue,
                f"**üí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ:**\n\n{solution}\n\n"
                f"---\n*–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –∞–≥–µ–Ω—Ç–∞. –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞—Å—Ç PR —Å –∫–æ–¥–æ–º.*"
            )
            
            logger.info(f"‚úÖ Issue #{issue.number} processed")
            
        except Exception as e:
            logger.error(f"Error processing issue: {e}")
            self.comment(issue, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    def analyze_task(self, issue):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É"""
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –∑–∞–¥–∞—á—É –¥–ª—è Python –ø—Ä–æ–µ–∫—Ç–∞:

**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {issue.title}
**–û–ø–∏—Å–∞–Ω–∏–µ:** {issue.body or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):
- –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å
- –ö–∞–∫–∏–µ —Ñ–∞–π–ª—ã –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã
- –°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏"""

        response = self.claude.messages.create(
            model="gpt-5-codex",
            max_tokens=500,
            messages=[{"role": "user", "content": prompt}]
        )
        
        return response.content[0].text
    
    def generate_solution(self, issue, analysis):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—à–µ–Ω–∏–µ"""
        prompt = f"""–ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏:

**–ó–∞–¥–∞—á–∞:** {issue.title}
{issue.body or ''}

**–ê–Ω–∞–ª–∏–∑:** {analysis}

–ù–∞–ø–∏—à–∏:
1. –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω —Ä–µ—à–µ–Ω–∏—è
2. –ö–∞–∫–æ–π –∫–æ–¥ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å (–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ)
3. –ö–∞–∫–∏–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å

–ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º."""

        response = self.claude.messages.create(
            model="gpt-5-codex",
            max_tokens=1000,
            messages=[{"role": "user", "content": prompt}]
        )
        
        return response.content[0].text
    
    def comment(self, issue, text):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        issue.create_comment(text)
        logger.info(f"Comment added to issue #{issue.number}")
    
    def is_processed(self, issue):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ issue —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"""
        comments = issue.get_comments()
        for comment in comments:
            if "ü§ñ AI Agent –Ω–∞—á–∏–Ω–∞–µ—Ç –∞–Ω–∞–ª–∏–∑" in comment.body:
                return True
        return False


def main():
    logger.info("=" * 50)
    logger.info("üöÄ GitHub AI Agent Starting")
    logger.info("=" * 50)
    
    try:
        agent = SimpleGitHubAgent()
        agent.run()
        logger.info("‚úÖ Agent finished successfully")
    except Exception as e:
        logger.error(f"‚ùå Agent failed: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
