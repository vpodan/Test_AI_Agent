# test_embedding_models.py
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π embeddings –∏ –ø—Ä–æ–º–ø—Ç–æ–≤
"""

import os
from real_estate_embedding_function import get_embedding_function, create_listing_text_for_embedding
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
sample_listing = {
    "title": "–ü—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è 3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ",
    "description": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å —Ä–µ–º–æ–Ω—Ç–æ–º, –±–∞–ª–∫–æ–Ω–æ–º –∏ –≤–∏–¥–æ–º –Ω–∞ –ø–∞—Ä–∫.",
    "features_by_category": {"–±–∞–ª–∫–æ–Ω": True, "—Ä–µ–º–æ–Ω—Ç": "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π"},
    "city": "–í–∞—Ä—à–∞–≤–∞",
    "district": "–ú–æ–∫–æ—Ç–æ–≤",
    "neighbourhood": "",
}

sample_queries = [
    "–ò—â—É –∫–≤–∞—Ä—Ç–∏—Ä—É —Å –±–∞–ª–∫–æ–Ω–æ–º –∏ —Ä–µ–º–æ–Ω—Ç–æ–º –≤ –í–∞—Ä—à–∞–≤–µ",
    "3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ —Å –≤–∏–¥–æ–º –Ω–∞ –ø–∞—Ä–∫",
    "–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ä–µ–º–æ–Ω—Ç–æ–º –∏ –±–∞–ª–∫–æ–Ω–æ–º"
]

embedding_models = [
    "text-embedding-3-large",
    "text-embedding-3-small",
    "text-embedding-ada-002"
]

prompt_styles = [1, 2]


def embed_texts(embedding_func, texts):
    embeddings = []
    for text in texts:
        emb = embedding_func.embed_query(text) if hasattr(embedding_func, 'embed_query') else embedding_func.embed_documents([text])[0]
        embeddings.append(emb)
    return np.array(embeddings)


def main():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ embeddings –∏ —Å—Ç–∏–ª–∏ –ø—Ä–æ–º–ø—Ç–æ–≤")
    
    for model in embedding_models:
        print(f"\n=== –ú–æ–¥–µ–ª—å: {model} ===")
        embedding_func = get_embedding_function(model)
        
        for style in prompt_styles:
            print(f"–ü—Ä–æ–º–ø—Ç —Å—Ç–∏–ª—å: {style}")
            # –°–æ–∑–¥–∞–µ–º embedding –¥–ª—è –ª–∏—Å—Ç–∏–Ω–≥–∞
            listing_text = create_listing_text_for_embedding(sample_listing, prompt_style=style)
            listing_emb = embed_texts(embedding_func, [listing_text])[0]
            
            # –°–æ–∑–¥–∞–µ–º embedding –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
            query_embs = embed_texts(embedding_func, sample_queries)
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
            sims = cosine_similarity([listing_emb], query_embs)[0]
            for q, sim in zip(sample_queries, sims):
                print(f"–ó–∞–ø—Ä–æ—Å: '{q}' -> –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ: {sim:.4f}")

if __name__ == "__main__":
    main()
