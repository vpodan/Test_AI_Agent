# real_estate_vector_db.py
import os
from typing import List, Dict, Optional
from langchain.schema import Document
from langchain_chroma import Chroma
from pymongo import MongoClient
from real_estate_embedding_function import get_embedding_function, create_listing_text_for_embedding

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CHROMA_PATH = "chroma_real_estate"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = MongoClient("mongodb://localhost:27017/")
db = client["real_estate"]
collection_rent = db["rent_listings"]
collection_sale = db["sale_listings"]

class RealEstateVectorDB:
    def __init__(self, embedding_model: Optional[str] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
        self.embedding_function = get_embedding_function(embedding_model)
        self.db = Chroma(
            persist_directory=CHROMA_PATH,
            embedding_function=self.embedding_function,
            collection_metadata={"hnsw:space": "cosine"}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        )
    
    def add_listing_to_vector_db(self, listing_data: Dict, collection_type: str, prompt_style: int = 1):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            listing_data (dict): –î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ MongoDB
            collection_type (str): 'rent' –∏–ª–∏ 'sale'
            prompt_style (int): —Å—Ç–∏–ª—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è embedding
        """
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è embedding
        text_content = create_listing_text_for_embedding(listing_data, prompt_style=prompt_style)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        listing_id = listing_data.get("_id")
        if not listing_id:
            print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ ID: {listing_data}")
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        metadata = {
            "id": listing_id,
            "collection_type": collection_type,  # rent –∏–ª–∏ sale
            "city": listing_data.get("city", ""),
            "district": listing_data.get("district", ""),
            "room_count": listing_data.get("room_count"),
            "price": listing_data.get("price"),
            "building_type": listing_data.get("building_type", ""),
            "has_description": bool(listing_data.get("description")),
            "has_features": bool(listing_data.get("features_by_category"))
        }
        
        # –°–æ–∑–¥–∞–µ–º Document –¥–ª—è Chroma
        document = Document(
            page_content=text_content,
            metadata=metadata
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
        existing = self.db.get(ids=[listing_id], include=[])
        
        if existing['ids']:
            print(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {listing_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
        try:
            self.db.add_documents([document], ids=[listing_id])
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {listing_id} –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {listing_id}: {e}")
    
    def populate_from_mongo(self, limit: Optional[int] = None, embedding_model: Optional[str] = None, prompt_style: int = 1):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ MongoDB –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
        
        Args:
            limit (int, optional): –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞
            embedding_model (str, optional): –º–æ–¥–µ–ª—å –¥–ª—è embeddings
            prompt_style (int): —Å—Ç–∏–ª—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è embedding
        """
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º embedding function –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∫–∞–∑–∞–Ω–∞
        if embedding_model:
            self.embedding_function = get_embedding_function(embedding_model)
            self.db.embedding_function = self.embedding_function
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
        print("üìç –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã...")
        rent_query = {}
        if limit:
            rent_listings = list(collection_rent.find(rent_query).limit(limit))
        else:
            rent_listings = list(collection_rent.find(rent_query))
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(rent_listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∞—Ä–µ–Ω–¥—ã")
        
        for listing in rent_listings:
            self.add_listing_to_vector_db(listing, "rent", prompt_style=prompt_style)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏
        print("\nüìç –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏...")
        sale_query = {}
        if limit:
            sale_listings = list(collection_sale.find(sale_query).limit(limit))
        else:
            sale_listings = list(collection_sale.find(sale_query))
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(sale_listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–∂–∏")
        
        for listing in sale_listings:
            self.add_listing_to_vector_db(listing, "sale", prompt_style=prompt_style)
